{"version":3,"file":"static/js/666.b2f97eb6.chunk.js","mappings":"gMAGA,MAm2BA,EAn2BqB,CACjBA,KAAM,gBACNC,QAAS,wlJAiDTC,YAAa,6EACbC,YAAa,qBACbC,IAAK,6+VA8iBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,sBACXC,MAAO,2HAMPC,KAAM,CAAC,CACXC,MAAO,uCACPR,YAAa,uCACbS,KAAM,ojSA8LNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,qBACbU,UAAW,GACb,CACEb,KAAM,cACNG,YAAa,mBACbU,UAAW,GACb,CACEb,KAAM,IACNG,YAAa,SACbU,UAAW,KAEb,CACEH,MAAO,mDACPR,YAAa,mDACbS,KAAM,q8DA8BNC,MAAO,CAAC,CACRZ,KAAM,eACNG,YAAa,qBACbU,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/remote-loader';\nimport * as component_2 from 'react-router-dom';\nimport * as component_3 from 'lodash';\nconst readmeConfig = {\n    name: `remote-loader`,\n    summary: `<p>remote-loader 是一个用于 React 应用程序的远程模块加载库，它基于 Webpack 5 的 Module Federation 功能，使开发者能够轻松地在应用程序中动态加载和使用远程模块。</p>\n<h3>主要功能</h3>\n<ul>\n<li><strong>动态加载远程模块</strong>：支持在运行时动态加载远程模块，无需预先打包</li>\n<li><strong>多种加载方式</strong>：提供组件、高阶组件和钩子三种方式加载远程模块</li>\n<li><strong>灵活的配置</strong>：支持全局配置和模块级配置</li>\n<li><strong>错误处理</strong>：内置错误处理和回退机制</li>\n<li><strong>版本控制</strong>：支持指定远程模块的版本</li>\n<li><strong>路径生成</strong>：支持自定义公共路径和静态路径的生成</li>\n</ul>\n<h3>架构概述</h3>\n<p>remote-loader 的核心架构包括以下几个部分：</p>\n<h4>核心组件</h4>\n<ul>\n<li><strong>RemoteLoader</strong>：主要的 React 组件，用于加载远程模块</li>\n<li><strong>withRemoteLoader</strong>：高阶组件，用于包装其他组件并提供远程模块加载功能</li>\n<li><strong>useLoader</strong>：React 钩子，用于在函数组件中加载远程模块</li>\n</ul>\n<h4>核心功能</h4>\n<ul>\n<li><strong>loadModule</strong>：核心函数，处理模块加载逻辑</li>\n<li><strong>parseToken</strong>：解析模块标记，支持复杂的模块引用格式</li>\n<li><strong>preset</strong>：全局配置管理</li>\n<li><strong>getPublicPath</strong>：生成公共路径</li>\n<li><strong>getStaticPath</strong>：生成静态路径</li>\n</ul>\n<h3>使用场景</h3>\n<p>remote-loader 适用于以下场景：</p>\n<ul>\n<li><strong>微前端架构</strong>：在微前端架构中，不同团队开发的模块可以通过 remote-loader 进行集成</li>\n<li><strong>动态功能加载</strong>：根据用户权限或其他条件动态加载功能模块</li>\n<li><strong>代码分割</strong>：将应用程序分割成多个小块，按需加载，提高性能</li>\n<li><strong>A/B 测试</strong>：动态加载不同版本的模块进行 A/B 测试</li>\n<li><strong>渐进式升级</strong>：在不影响现有功能的情况下，逐步升级应用程序的部分模块</li>\n</ul>\n<h3>技术依赖</h3>\n<ul>\n<li><strong>React</strong>：基于 React 的组件和钩子</li>\n<li><strong>Webpack 5</strong>：利用 Webpack 5 的 Module Federation 功能</li>\n<li><strong>Lodash</strong>：使用 Lodash 的模板功能生成路径</li>\n</ul>\n<h3>工作流程</h3>\n<ol>\n<li>配置远程容器和入口文件</li>\n<li>使用 RemoteLoader 组件、withRemoteLoader 高阶组件或 useLoader 钩子加载远程模块</li>\n<li>remote-loader 解析模块标记，确定远程容器、模块名称和版本</li>\n<li>加载远程模块并处理加载状态和错误</li>\n<li>将加载的模块渲染到应用程序中</li>\n</ol>`,\n    description: `加载一个webpack5生成的邦联模块`,\n    packageName: `@kne/remote-loader`,\n    api: `<h3>API 文档</h3>\n<p>本文档详细描述了 remote-loader 库提供的所有 API。</p>\n<h3>组件</h3>\n<h4>RemoteLoader</h4>\n<p>用于加载远程模块的 React 组件。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>module</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程模块标记，格式：<code>[模块地址/remote/version:]模块名[@子模块][.模块属性]</code></td>\n</tr>\n<tr>\n<td>fallback</td>\n<td>ReactNode</td>\n<td>否</td>\n<td>null</td>\n<td>加载中显示的内容</td>\n</tr>\n<tr>\n<td>errorFallback</td>\n<td>ReactNode | Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时显示的内容，可以是 React 节点或接收错误对象的函数</td>\n</tr>\n<tr>\n<td>onError</td>\n<td>Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时的回调函数</td>\n</tr>\n<tr>\n<td>...props</td>\n<td>any</td>\n<td>否</td>\n<td>-</td>\n<td>传递给加载的远程模块的属性</td>\n</tr>\n</tbody>\n</table>\n<h3>高阶组件</h3>\n<h4>withRemoteLoader</h4>\n<p>用于包装组件并提供远程模块加载功能的高阶组件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>module</td>\n<td>string | Array&lt;string&gt;</td>\n<td>是</td>\n<td>-</td>\n<td>远程模块标记或标记数组</td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>配置选项</td>\n</tr>\n<tr>\n<td>options.fallback</td>\n<td>ReactNode</td>\n<td>否</td>\n<td>null</td>\n<td>加载中显示的内容</td>\n</tr>\n<tr>\n<td>options.errorFallback</td>\n<td>ReactNode | Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时显示的内容</td>\n</tr>\n<tr>\n<td>options.onError</td>\n<td>Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<h3>钩子</h3>\n<h4>useLoader</h4>\n<p>用于在函数组件中加载远程模块的 React 钩子。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>module</td>\n<td>string | Array&lt;string&gt;</td>\n<td>是</td>\n<td>-</td>\n<td>远程模块标记或标记数组</td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>配置选项</td>\n</tr>\n<tr>\n<td>options.onError</td>\n<td>Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>result</td>\n<td>Object</td>\n<td>包含加载状态和结果的对象</td>\n</tr>\n<tr>\n<td>result.loading</td>\n<td>boolean</td>\n<td>是否正在加载</td>\n</tr>\n<tr>\n<td>result.error</td>\n<td>Error</td>\n<td>加载错误，如果没有错误则为 null</td>\n</tr>\n<tr>\n<td>result.module</td>\n<td>any</td>\n<td>加载的远程模块，如果未加载完成则为 null</td>\n</tr>\n</tbody>\n</table>\n<h3>函数</h3>\n<h4>loadModule</h4>\n<p>加载远程模块的核心函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>module</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程模块标记</td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>配置选项</td>\n</tr>\n<tr>\n<td>options.onError</td>\n<td>Function</td>\n<td>否</td>\n<td>null</td>\n<td>加载失败时的回调函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise&lt;any&gt;</td>\n<td>解析为加载的远程模块的 Promise</td>\n</tr>\n</tbody>\n</table>\n<h4>parseToken</h4>\n<p>解析模块标记的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>token</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>模块标记</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object</td>\n<td>解析后的模块信息</td>\n</tr>\n<tr>\n<td>Object.remote</td>\n<td>string</td>\n</tr>\n<tr>\n<td>Object.version</td>\n<td>string</td>\n</tr>\n<tr>\n<td>Object.module</td>\n<td>string</td>\n</tr>\n<tr>\n<td>Object.submodule</td>\n<td>string</td>\n</tr>\n<tr>\n<td>Object.property</td>\n<td>string</td>\n</tr>\n</tbody>\n</table>\n<h4>preset</h4>\n<p>设置全局配置的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>全局配置选项</td>\n</tr>\n<tr>\n<td>options.remotes</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>远程容器配置</td>\n</tr>\n<tr>\n<td>options.remoteEntry</td>\n<td>string</td>\n<td>否</td>\n<td>'remoteEntry.js'</td>\n<td>远程入口文件名</td>\n</tr>\n<tr>\n<td>options.onError</td>\n<td>Function</td>\n<td>否</td>\n<td>null</td>\n<td>全局错误处理函数</td>\n</tr>\n<tr>\n<td>options.fallback</td>\n<td>ReactNode</td>\n<td>否</td>\n<td>null</td>\n<td>全局加载中显示的内容</td>\n</tr>\n<tr>\n<td>options.errorFallback</td>\n<td>ReactNode | Function</td>\n<td>否</td>\n<td>null</td>\n<td>全局加载失败时显示的内容</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object</td>\n<td>当前的全局配置</td>\n</tr>\n</tbody>\n</table>\n<h4>getPublicPath</h4>\n<p>生成公共路径的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remote</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程容器名称</td>\n</tr>\n<tr>\n<td>version</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>远程容器版本</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>生成的公共路径</td>\n</tr>\n</tbody>\n</table>\n<h4>getStaticPath</h4>\n<p>生成静态路径的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remote</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程容器名称</td>\n</tr>\n<tr>\n<td>version</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>远程容器版本</td>\n</tr>\n<tr>\n<td>file</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>文件名</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>生成的静态路径</td>\n</tr>\n</tbody>\n</table>\n<h4>getOrLoadRemote</h4>\n<p>获取或加载远程容器的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remote</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程容器名称</td>\n</tr>\n<tr>\n<td>version</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>远程容器版本</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise&lt;Object&gt;</td>\n<td>解析为远程容器的 Promise</td>\n</tr>\n</tbody>\n</table>\n<h4>loadComponent</h4>\n<p>加载远程组件的函数。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>remote</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>远程容器名称</td>\n</tr>\n<tr>\n<td>version</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>远程容器版本</td>\n</tr>\n<tr>\n<td>module</td>\n<td>string</td>\n<td>是</td>\n<td>-</td>\n<td>模块名称</td>\n</tr>\n<tr>\n<td>submodule</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>子模块名称</td>\n</tr>\n<tr>\n<td>property</td>\n<td>string</td>\n<td>否</td>\n<td>null</td>\n<td>模块属性</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise&lt;any&gt;</td>\n<td>解析为加载的远程组件的 Promise</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: true,\n        className: `remote_loader_4f65d`,\n        style: `.remote_loader_4f65d .ant-space-vertical {\n  width: 100%;\n}\n.remote_loader_4f65d .container {\n  background: #FFF;\n}`,\n        list: [{\n    title: `加载一个模块`,\n    description: `加载一个模块`,\n    code: `const {default: Remote, preset} = remoteLoader;\nconst {range} = _;\n\nconst BaseExample = () => {\n    return <div>\n        <Remote module=\"components-core:Content\"\n                list={[{label: '标题', content: '内容'}, {label: '标题标题', content: '内容内容'}, {\n                    label: '标题标', content: '内容内容内容内容内容内容内容内容内容内容'\n                }, {\n                    label: '标题标题标题',\n                    content: '内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容'\n                }]}/>\n        <Remote module=\"components-core:Table\"\n            name=\"test-table\" dataSource={[\n                {\n                    id: 0,\n                    date: \"2021-07-21\",\n                    datetime: \"2023-07-22 09:00:00\",\n                    serialNumber: \"SX00192932323434\",\n                    serialNumberShort: \"SH0023\",\n                    userName: \"林珊珊\",\n                    title: \"我是主要字段\",\n                    tagEnum: null,\n                    enUserName: \"Lin Shanshan\",\n                    phoneNumber: \"+86 18792877372\",\n                    email: \"a@a.com\",\n                    count: 4,\n                    description:\n                        \"我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述\",\n                    description2:\n                        \"我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述我是一段描述\",\n                    other: \"其他信息\",\n                },\n                {\n                    id: 1,\n                    date: \"\",\n                    datetime: \"2023-07-22 09:00:00\",\n                    serialNumber: \"SX00192932323434\",\n                    serialNumberShort: \"SH0023\",\n                    userName: \"林珊珊1\",\n                    title: \"我是主要字段\",\n                    tagEnum: \"Y\",\n                    enUserName: \"Lin Shanshan\",\n                    phoneNumber: null,\n                    email: \"a@a.com\",\n                    count: 5,\n                    description: \"我是一段描述\",\n                    description2: \"我是一段描述\",\n                    other: \"其他信息\",\n                },\n            ]}\n            columns={[\n                {\n                    name: \"date\",\n                    title: \"日期\",\n                    type: \"date\",\n                    hover: true,\n                },\n                {\n                    name: \"datetime\",\n                    title: \"日期时间\",\n                    type: \"datetime\",\n                    hideSecond: true,\n                },\n                {\n                    name: \"serialNumber\",\n                    title: \"编号\",\n                    type: \"serialNumber\",\n                    primary: true,\n                    onClick: async (item) => {\n                        console.log(item);\n                        return new Promise((resolve) => {\n                            setTimeout(() => {\n                                resolve(true);\n                            }, 10000);\n                        });\n                    },\n                },\n                {\n                    name: \"serialNumberShort\",\n                    title: \"短编号\",\n                    type: \"serialNumberShort\",\n                },\n                {\n                    name: \"title\",\n                    title: \"主要信息\",\n                    type: \"mainInfo\",\n                },\n                {\n                    name: \"tag\",\n                    title: \"状态标签\",\n                    type: \"tag\",\n                    valueOf: () => ({ type: \"success\", text: \"审核通过\" }),\n                },\n                {\n                    name: \"tagEnum\",\n                    title: \"标签枚举\",\n                    type: \"tag\",\n                    valueOf: (item) =>\n                        item.tagEnum && {\n                            type: \"success\",\n                            isEnum: true,\n                            moduleName: \"marital\",\n                            name: item.tagEnum,\n                        },\n                },\n                {\n                    name: \"avatar\",\n                    title: \"头像\",\n                    type: \"avatar\",\n                    valueOf: () => ({ gender: \"F\" }),\n                },\n                {\n                    name: \"user\",\n                    title: \"用户\",\n                    type: \"user\",\n                    valueOf: (item) => \\`\\${item.enUserName} \\${item.userName}\\`,\n                },\n                {\n                    name: \"hideInfo\",\n                    title: \"隐藏字段\",\n                    type: \"hideInfo\",\n                    valueOf: (item) =>\n                        item[\"phoneNumber\"] && {\n                            loader: () => {\n                                return item[\"phoneNumber\"] + \"-\" + item[\"id\"];\n                            },\n                        },\n                },\n                {\n                    name: \"userName\",\n                    title: \"用户名\",\n                    type: \"userName\",\n                },\n                {\n                    name: \"contacts\",\n                    title: \"联系人\",\n                    type: \"contacts\",\n                    valueOf: (item) => \\`\\${item.userName} \\${item.phoneNumber}\\`,\n                },\n                {\n                    name: \"count\",\n                    title: \"数量\",\n                    type: \"singleRow\",\n                    render: ({ target }) => {\n                        return target.count === 5 ? { hover: true } : { hover: false };\n                    },\n                },\n                {\n                    name: \"description\",\n                    title: \"描述\",\n                    type: \"description\",\n                },\n                {\n                    name: \"description2\",\n                    title: \"描述(省略)\",\n                    type: \"description\",\n                    ellipsis: true,\n                },\n                {\n                    name: \"other\",\n                    title: \"其他\",\n                    type: \"other\",\n                    hover: true,\n                },\n                {\n                    name: \"options\",\n                    title: \"操作\",\n                    type: \"options\",\n                    valueOf: (item) => [\n                        {\n                            onClick: () => {\n                                return new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                    }, 1000);\n                                });\n                            },\n                            children: \"分配Program及教练\",\n                        }\n                    ],\n                },\n            ]}\n        />\n    </div>;\n};\n\nrender(<BaseExample/>);\n\n`,\n    scope: [{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_1\n},{\n    name: \"reactRouter\",\n    packageName: \"react-router-dom\",\n    component: component_2\n},{\n    name: \"_\",\n    packageName: \"lodash\",\n    component: component_3\n}]\n},{\n    title: `加载一个属性模块`,\n    description: `加载一个属性模块`,\n    code: `const {default: Remote} = remoteLoader;\nconst BaseExample = () => {\n    return <Remote module=\"InfoPage\">\n        <Remote module=\"InfoPage.Part\" title=\"退票信息\">\n            <Remote module=\"Descriptions\"\n                    dataSource={[[{label: \"客户名称\", content: \"腾讯\"}, {\n                        label: \"发票抬头\", content: \"腾讯科技公司\"\n                    }], [{label: \"发票类型\", content: \"增值税专用发票\"}, {\n                        label: \"发票开具日期\", content: \"2022-08-15\"\n                    }], [{label: \"退票金额\", content: \"22000.00元\"}], [{\n                        label: \"发票号\", content: <div>\n                            <div>00384895992774</div>\n                            <div>00384895992774</div>\n                            <div>00384895992774</div>\n                            <div>00384895992774</div>\n                        </div>\n                    }], [{label: \"是否需要重开发票\", content: \"否\"}, {\n                        label: \"是否涉及金融变动\", content: \"否\"\n                    }], [{label: \"是否造成实质损失\", content: \"否\"}, {\n                        label: \"责任归属\", content: \"客户原因\"\n                    }], [{label: \"退票原因\", content: \"退票原因的描述退票原因的描述退票原因的描\"}], [{\n                        label: \"附件\", content: \"附件名称\"\n                    }], [{label: \"操作时间\", content: \"2022-08-01 16:32\"}, {label: \"操作人\", content: \"西西歪\"}]]}/>\n        </Remote>\n    </Remote>;\n};\n\nrender(<BaseExample/>);\n\n`,\n    scope: [{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_1\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component"],"sourceRoot":""}